/*
 * File: BasicGaborShader.frag.txt
 * Shader for drawing of xyL Gabor patches.
 * Adapted from PTB.
 * All variables are in radians (conversion takes place in vert.txt; 
 * the m-code is in degrees.
 * BK  April 2014
 */

varying float orientation;
varying float contrast;
varying float phase;
varying float freqTwoPi;
varying float expMultiplier;
varying vec4  color; 
varying float meanLuminance; 
varying float sigma1;
varying float sigma2;
varying float flickerPhase;


uniform int colorMode;
uniform int mask;
uniform int flickerMode;

uniform float multiGaborsPhaseOffset[10];
uniform float multiGaborsOriOffset[10];
uniform int multiGaborsN;


void main()
{
    /* Query current output texel position wrt. to Center of Gabor: */
    vec2 pos;
    vec2 coeff;
    vec2 sigma2d;
    float sv;
    float ev;
   float alpha;
    float tmp;
    float tev;
    float factor;
    

    pos = gl_TexCoord[0].xy;
    sv =0.0;

    /* Compute (x,y) distance weighting coefficients, based on rotation angle: */
    /* Note that this is a constant for all fragments, but we can not do it in */
    /* the vertex shader, because the vertex shader does not have sufficient   */
    /* numeric precision on some common hardware out there. */
   
    /* Evaluate sine grating at requested position, angle and phase: */
    for (int i=0;i<multiGaborsN;i++){
        coeff = vec2(cos(orientation+multiGaborsOriOffset[i]), sin(orientation+multiGaborsOriOffset[i])) * freqTwoPi;        
        sv = sv + sin(dot(coeff, pos) + phase + multiGaborsPhaseOffset[i]);
    }
    /* Compute exponential hull for the gabor: */
    if (mask==1){
        /* Gabor mask : Sigma = [stdev */
        ev = exp(-0.5*dot(pos, pos) / (sigma1 * sigma1));
        alpha =1.0;
    }else if (mask==2){
        /* Hard circular mask: sigmae = outer*/
        ev  = float(sqrt(dot(pos,pos))<=sigma1); 
        alpha = ev; /* This makes the part of the texture outside the circle completely transparent */
    }else if (mask==3){
        /* Annulus  Sigma  = [inner outer]*/
        
        tmp = sqrt(dot(pos,pos));
        ev  = float((tmp>=sigma1) && (tmp<=sigma2)); 
        alpha = ev; /* This makes the part of the texture outside the circle completely transparent */        
    }else if (mask==4){
        /* Gabor truncated at 3 sigma. */
        tmp = dot(pos, pos) / (sigma1 * sigma1);        
        if (tmp>9.0){
            /* Truncate at 3 sigma and make transparent */
            alpha = 0.0; 
            ev =0.0;
        }else{
            ev = exp(-0.5*tmp);
            alpha =1.0;
        }
    }else if (mask==5){
        /* Gabor mask with different sigmas in x/y*/        
        tmp = pos[0]*pos[0]/(sigma1*sigma1)+pos[1]*pos[1]/(sigma2*sigma2);

       if (tmp>9.0){
            /* Truncate at 3 sigma and make transparent */
            alpha = 0.0; 
            ev =0.0;
        }else{
            ev = exp(-0.5*tmp);
            alpha =1.0;
        }
     
    }else{
        /* Throw an error; this is not a valid mask... */
        ev =1.0;
        alpha = 1.0;
    }

    /* Temporal envelope */
    if (flickerMode==1){
        /*none */
        tev =1.0;
    }else if (flickerMode ==2){   
        /*sinusoidal */
        tev = sin(flickerPhase);
    }else if (flickerMode==3){
        /* square wave */
        tev = sign(sin(flickerPhase));
    }else if (flickerMode ==4){
        /*sinusoidal contrast modulation*/
        tev = 1.0+sin(flickerPhase);
    }else if (flickerMode ==5){
        /* square wave contrast modualtion*/
        tev = 1.0+sign(sin(flickerPhase));
    }else{
        /*throw an error - not a valid mode */
        tev =1.0;
    }

    factor =  1.0 +contrast * ev * sv * tev;
    if (colorMode==1 || colorMode==3 || colorMode==4){
        /*  RGB, LUM or LINLUT */
        gl_FragColor[0] = color[0] * factor;
        gl_FragColor[1] = color[1] * factor;
        gl_FragColor[2] = color[2] * factor;
        gl_FragColor[3] = alpha*color[3];
    }else if (colorMode ==2) {
        /* xyL */
        gl_FragColor[0] = color[0];
        gl_FragColor[1] = color[1];
        gl_FragColor[2] = color[2] *factor;
        gl_FragColor[3] = alpha*color[3]; /* Not sure alpha makes sense in xyL mode */
    }
}
